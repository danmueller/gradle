<chapter id='groovy_plugin' xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>The Groovy Plugin</title>
    <para>The Groovy Plugin extends the JavaPlugin. It can deal with pure Java projects
        <footnote>
            <para>We don't recommend this, as the Groovy plugin uses the
                <emphasis>Groovyc</emphasis>
                Ant task to compile the sources. For pure Java projects you might rather stick with pure <literal>
                    javac</literal>. In particular as you would have to supply a groovy jar for doing this.
            </para>
        </footnote>
        , with mixed Java and Groovy projects and with pure Groovy projects. The Groovy plugin does not add any tasks.
        It modifies some of the tasks of the JavaPlugin and adds to the
        <emphasis>Convention</emphasis>
        object. See <xref linkend='groovylayout'/>, <xref linkend='groovyconvention'/>
        and <xref linkend='groovyconventionFloatingDir'/>. It also add a new dependency configuration <literal>groovy</literal>.
    </para>
    <para>Gradle is written in Groovy and offers you to write your build scripts in Groovy. But this is an internal
        aspect of Gradle which is strictly separated from building Groovy projects. You are free to choose the Groovy
        version your project should be build with. This Groovy version is not just used for compiling your code and
        running your tests. The
        <literal>groovyc</literal>
        compiler and the the
        <literal>groovydoc</literal>
        tool are also taken from the Groovy version you provide. As usual, with freedom comes responsibility ;). You are
        not just free to choose a Groovy version, you have to provide one. Gradle expects that the groovy libraries are
        assigned to the
        <literal>groovy</literal>
        dependency configuration. Here are some examples how this works (the notation depends on your resolvers):
    </para>
    <programlisting><![CDATA[
dependencies {
    addMavenRepo()
    groovy "org.codehaus.groovy:groovy-all:1.6-beta-1"
    // further declarations
}	
]]></programlisting>
    <programlisting><![CDATA[
dependencies {
    addFlatDirResolver('lib', new File(rootDir, 'lib'))
    clientModule(['groovy'], ":groovy-all:1.5.5") {
	        dependency(":commons-cli:1.0")
	        clientModule(":ant:1.7.0") {
	            dependencies(":ant-junit:1.7.0:jar", ":ant-launcher:1.7.0")
	        }
    }
}	
]]></programlisting>
    <table id='groovylayout'>
        <title>Default Directory Layout (additional to the Java layout)</title>
        <thead>
            <tr>
                <td>Folder</td>
                <td>Meaning</td>
            </tr>
        </thead>
        <tr>
            <td>
                <literal>src/main/groovy</literal>
            </td>
            <td>Application/Library sources in Groovy</td>
        </tr>
        <tr>
            <td>
                <literal>src/test/groovy</literal>
            </td>
            <td>Test sources in Groovy</td>
        </tr>

    </table>
    <table id='groovyconvention'>
        <title>Groovy Convention Object (extends JavaConvention).</title>
        <thead>
            <tr>
                <td>Dir Name</td>
                <td>Dir File</td>
                <td>Default Value Name</td>
                <td>Default Value File</td>
            </tr>
        </thead>
        <tr>
            <td>groovySrcDirNames</td>
            <td>groovySrcDirs</td>
            <td>
                <literal>main/groovy</literal>
            </td>
            <td>[
                <emphasis>srcRoot</emphasis>
                <literal>/main/groovy</literal>]
            </td>
        </tr>
        <tr>
            <td>groovyTestSrcDirNames</td>
            <td>groovyTestSrcDirs</td>
            <td>
                <literal>test/groovy</literal>
            </td>
            <td>[
                <emphasis>srcRoot</emphasis>
                <literal>/test/groovy</literal>]
            </td>
        </tr>

    </table>
    <table id='groovyconventionFloatingDir'>
        <title>Groovy Convention Object (extends JavaConvention) - Floating Dir Properties</title>
        <thead>
            <tr>
                <td>Property</td>
                <td>Type</td>
                <td>Default Value</td>
            </tr>
        </thead>
        <tr>
            <td>floatingGroovySrcDirs</td>
            <td>List</td>
            <td>empty</td>
        </tr>
        <tr>
            <td>floatingGroovyTestSrcDirs</td>
            <td>List</td>
            <td>empty</td>
        </tr>
    </table>
    <para>All the Groovy source directories can contain Groovy
        <emphasis>and</emphasis>
        Java code. The Java source directories may only contain Java source code (and can of course be empty)
        <footnote>
            <para>We are using the same conventions as introduced by Russel Winders Gant tool (<ulink
                    url='http://gant.codehaus.org'/>).
            </para>
        </footnote>
    </para>
    <section id='sec:groovyCompile'>
        <title>Compile</title>
        <para>The
            <emphasis>GroovyCompile</emphasis>
            task has two instances,
            <literal>compile</literal>
            and <literal>testCompile</literal>. The task type extends the
            <literal>Compile</literal>
            task (see <xref linkend='sec:compile'/>)
        </para>
        <table>
            <title>Groovy Convention Object - Source Directory Properties</title>
            <thead>
                <tr>
                    <td>Task Instance</td>
                    <td>Task Property</td>
                    <td>Convention Property</td>
                </tr>
            </thead>
            <tr>
                <td>compile</td>
                <td>groovySourceDirs</td>
                <td>groovySrcDirs</td>
            </tr>
            <tr>
                <td>testCompile</td>
                <td>groovySourceDirs</td>
                <td>groovyTestSrcDirs</td>
            </tr>

        </table>
        <para>Have a look at <apilink class='org.gradle.api.tasks.compile.GroovyCompile'/>
            to learn about the details. The compile task delegates to the Ant Groovyc task to do the compile. Via the
            compile task you can set most of the properties of Ants Groovyc task.
        </para>
    </section>
    <section id='sec:test'>
        <title>Test</title>
        <para>In contrast to the Java plugin the fork mode is set to once by default, because of the significant startup
            time of Groovy. The Java plugin uses per test as fork mode (see <xref linkend='sec:java_test'/>).
        </para>
    </section>
</chapter>
