<chapter id='tutorial_using_tasks' xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Build Script Basics</title>
    <para>You run a build using the <command>gradle</command> command. When run, <command>gradle</command>
        normally looks for a file called <filename>build.gradle</filename> in the current directory.
        <footnote><para>There are command line switches to change this behavior. See <xref linkend='gradle_command_line'/>)</para></footnote>
        We call this <filename>build.gradle</filename> file a <firstterm>build script</firstterm>, although strictly speaking it is
        a build configuration script, as we will see later. In Gradle the location of the build script file defines a
        project. The name of the directory containing the build script is used as the name of the project.
    </para>
    <section>
        <title>Hello World</title>
        <para>In Gradle the most basic building block is the <firstterm>task</firstterm>. The tasks for your build are
            defined in the build script. To try this out, create the following build script named <filename>build.gradle</filename>.
        </para>
        <sample id="hello" dir="userguide/tutorial/hello">
            <sourcefile file="build.gradle"/>
        </sample>
        <para>In a command-line shell, enter into the containing directory and execute the build script by running
            <userinput>gradle -q hello</userinput>:
            <footnote>
                <para>Every code sample in this chapter can be found in the <filename>samples</filename>
                    dir of your Gradle distribution. The output box always denotes the directory name relative to the
                    <filename>samples</filename> dir.
                </para>
            </footnote>
            <footnote>
                <para>The scripts are executed with the <option>-q</option> option which suppresses the Gradle logging.
                    See <xref linkend="logging"/> for more details.
                </para>
            </footnote>
        </para>
        <sample id="hello" dir="userguide/tutorial/hello">
            <output args="-q hello"/>
        </sample>
        <para>If you think this looks damn similar to Ant's targets, well, you are right. Gradle tasks are the
            equivalent to Ant targets. But as you will see, they are much more powerful. We have used a different
            terminology to Ant as we think the word <emphasis>task</emphasis> is more expressive than the word
            <emphasis>target</emphasis> . Unfortunately this introduces a terminology clash with Ant, as Ant calls its
            commands, such as <literal>javac</literal> or <literal>copy</literal>, tasks. So when we talk about tasks,
            we <emphasis>always</emphasis> mean Gradle tasks, which are the equivalent to Ant's targets. If we talk
            about Ant tasks (Ant commands), we explicitly say <emphasis>ant</emphasis> task.
        </para>
    </section>
    <section>
        <title>Build scripts are code</title>
        <para>Gradle's build scripts expose to you the full power of Groovy. As an appetizer, have a look at this:
        </para>
        <sample id="upper" dir="userguide/tutorial/upper">
            <sourcefile file="build.gradle"/>
            <output args="-q upper"/>
        </sample>
        <para>or</para>
        <sample id="count" dir="userguide/tutorial/count">
            <sourcefile file="build.gradle"/>
            <output args="-q count"/>
        </sample>
    </section>
    <section id='sec:task_dependencies'>
        <title>Task dependencies</title>
        <para>As you probably have guessed, you can declare dependencies between your tasks.
        </para>
        <sample id="intro" dir="userguide/tutorial/intro">
            <sourcefile file="build.gradle"/>
            <output args="-q intro"/>
        </sample>
        <para>To add a dependency, the corresponding task does not need to exist.</para>
        <sample id="lazyDependsOn" dir="userguide/tutorial/lazyDependsOn">
            <sourcefile file="build.gradle"/>
            <output args="-q taskX"/>
        </sample>
        <para>The dependency of <literal>taskX</literal> to <literal>taskY</literal> is declared before
            <literal>taskY</literal> is created. This is very important for multi-project builds. Task dependencies are
            discussed in more detail in <xref linkend='sec:adding_dependencies_to_tasks'/>.
        </para>
    </section>
    <section>
        <title>Dynamic tasks</title>
        <para>The power of Groovy be used for more than definining what a task does. For example, you can also use it
            to dynamically create tasks.
        </para>
        <sample id="dynamic" dir="userguide/tutorial/dynamic">
            <sourcefile file="build.gradle"/>
            <output args="-q task_1"/>
        </sample>
    </section>
    <section>
        <title>Manipulating existing tasks</title>
        <para>Once tasks are created they can be accessed via an <emphasis>API</emphasis>. This is different to Ant. For
            example you can create additional dependencies.
        </para>
        <sample id="dynamicDepends" dir="userguide/tutorial/dynamicDepends">
            <sourcefile file="build.gradle"/>
            <output args="-q task_0"/>
        </sample>
        <para>Or you can add behavior to an existing task.</para>
        <sample id="helloEnhanced" dir="userguide/tutorial/helloEnhanced">
            <sourcefile file="build.gradle"/>
            <output args="-q hello"/>
        </sample>
        <para>The calls <literal>doFirst</literal> and <literal>doLast</literal> can be executed multiple times.
            They add an action to the beginning or the end of the task's actions list. When the task executes, the
            actions in the action list are executed in order. 
        </para>
    </section>
    <section>
        <title>Shortcut notations</title>
        <para>There is a convenient notation for accessing <emphasis>existing</emphasis> tasks.
        </para>
        <sample id="helloWithShortCut" dir="userguide/tutorial/helloWithShortCut">
            <sourcefile file="build.gradle"/>
            <output args="-q hello"/>
        </sample>
        <para>This enables very readable code. Especially when using the out of the box tasks provided by the plugins
            (e.g. <literal>compile</literal>).</para>
    </section>
    <section id='sec:dynamic_properties'>
        <title>Dynamic Task Properties</title>
        <para>You can assign arbitrary <emphasis>new</emphasis> properties to any task.
        </para>
        <sample id="dynamicProperties" dir="userguide/tutorial/dynamicProperties">
            <sourcefile file="build.gradle"/>
            <output args="-q showProps"/>
        </sample>
    </section>
    <section>
        <title>Ant</title>
        <para>Let's talk a little bit about Gradle's Ant integration. Ant can be divided into two layers. The first layer
            is the Ant language. It contains the syntax for the build.xml, the handling of the targets, special
            constructs like macrodefs, etc. Basically everything except the Ant tasks and types. Gradle does not offer
            any special integration for this first layer. Of course you can in your build script execute an Ant build as
            an external process. Your build script may contain statements like:
            <literal>"ant clean compile".execute()</literal>.
            <footnote>
                <para>In Groovy you can execute Strings. To learn more about executing external processes with Groovy
                    have a look in GINA 9.3.2 or at the Groovy wiki
                </para>
            </footnote>
        </para>
        <para>The second layer of Ant is its wealth of Ant tasks and types, like <literal>javac</literal>,
            <literal>copy</literal>
            or <literal>jar</literal>. For this layer Gradle provides excellent integration simply by relying on Groovy.
            Groovy is shipped with the fantastic <literal>AntBuilder</literal>. Using Ant tasks from Gradle is as
            convenient and more powerful than using Ant tasks from a <filename>build.xml</filename> file.
            Let's look at an example:
        </para>
        <sample id="antChecksum" dir="userguide/tutorial/antChecksum">
            <sourcefile file="build.gradle"/>
            <output args="-q checksum"/>
        </sample>
        <para>In your build script, a property called <literal>ant</literal> is provided by Gradle. It is a reference
            to an instance of Groovy's <literal>AntBuilder</literal>. The <literal>AntBuilder</literal>
            is used the following way:
        </para>
        <itemizedlist>
            <listitem>
                <para>Ant task names corresponds to AntBuilder method names.
                </para>
            </listitem>
            <listitem>
                <para>Ant tasks attributes are arguments for this methods. The arguments are passed in from of a map.
                </para>
            </listitem>
            <listitem>
                <para>Nested Ant tasks corresponds to method calls of the passed closure.
                </para>
            </listitem>
        </itemizedlist>
        <para>To learn more about the Ant Builder have a look in GINA 8.4 or at the Groovy Wiki
        </para>
    </section>
    <section>
        <title>Using methods</title>
        <para>Gradle scales in how you can organize your build logic. The first level of organizing your build logic for
            the example above, is extracting a method.
        </para>
        <sample id="antChecksumWithMethod" dir="userguide/tutorial/antChecksumWithMethod">
            <sourcefile file="build.gradle"/>
            <output args="-q checksum"/>
        </sample>
        <para>Later you will see that such methods can be shared among subprojects in multi-project builds. If your
            build logic becomes more complex, Gradle offers you other very convenient ways to organize it. We have
            devoted a whole chapter to this. See <xref linkend='organizing_build_logic'/>.
        </para>
    </section>
    <section id='sec:default_tasks'>
        <title>Default Tasks</title>
        <para>Gradle allows you to define one or more default tasks for your build.
        </para>
        <sample id="defaultTasks" dir="userguide/tutorial/defaultTasks">
            <sourcefile file="build.gradle"/>
            <output args="-q"/>
        </sample>
        <para>This is equivalent to running <userinput>gradle clean run</userinput>. In a multi-project build every
            subproject can have its own specific default tasks. If a subproject does not specify default tasks, the
            default tasks of the parent project are used (if defined).
        </para>
    </section>
    <section id="configure-by-dag">
        <title>Configure By DAG</title>
        <para>As we describe in full detail later (See <xref linkend='build_lifecycle'/>) Gradle has a
            configuration phase and an execution phase. After the configuration phase Gradle knows all tasks that should
            be executed. Gradle offers you a hook to make use of this information. A usecase for this would be to check
            if the release task is part of the tasks to be executed. Depending on this you can assign different values
            to some variables.
        </para>
        <sample id="configByDag" dir="userguide/tutorial/configByDag">
            <sourcefile file="build.gradle"/>
            <output args="-q release"/>
        </sample>
        <para>The important thing is, that the fact that the release task has been choosen, has an effect
            <emphasis>before</emphasis> the release task gets executed. Nor has the release task to be the
            <emphasis>primary</emphasis> task (i.e. the task passed to the <command>gradle</command> command).
        </para>
    </section>
    <section>
        <title>Summary</title>
        <para>This is not the end of the story for tasks. So far we have worked with simple tasks. Tasks will be
            revisited in <xref linkend='more_about_tasks'/> and when we look at the Java Plugin in
            <xref linkend='java_plugin'/>.
        </para>
    </section>
</chapter>
