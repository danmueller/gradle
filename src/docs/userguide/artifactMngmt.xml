<chapter id="artifact_management" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Artifact Management</title>
    <section>
        <title>Introduction</title>
        <para>This chapter is about how you declare what are the artifacts of your project and how to work with
            them (e.g. upload them). We define the artifacts of the projects as the files the project want to
            provide to the outside world. This can be a library or a distribution or any other file. Usually artifacts
            are archives, but not necessarily. In the Maven world a project can provide only one artifact. With Gradle
            a project can provide as many artifacts as its like.
        </para>
    </section>
    <section>
        <title>Artifacts and Configurations</title>
        <para>Like dependencies, artifacts are grouped by configurations. In fact, a configuration can contain
            both, artifacts and dependencies, at the same time. To assign an artifact to a configuration, you can write:
        </para>
        <sample id="assignArtifact" dir="userguide/artifacts/uploading">
            <sourcefile file="build.gradle" snippet="assign-artifact"/>
        </sample>
        <para>What do you gain by assigning an artifact to a configuration? For each configuration (also for the custom
        ones added by you) Gradle provides the tasks <code>upload[ConfigurationName]</code> and
        <code>build[ConfigurationName]</code>.
        <footnote>To be exact, the Base plugin provides those tasks. The BasePlugin is automatically applied, if you use
        the Java plugin.</footnote>
        Executing those tasks will build or upload the artifacts belonging to
        the respective configuration.
        </para>
        <para>Table <xref linkend="tab:configurations"/> shows the configurations added by the Java plugin. Two of the
        configurations are relevant for the usage with artifacts. The <code>archives</code> configuration is the standard
        configuration to assign your artifacts to. The Java plugin automatically assigns the default jar to this
        configuration. We will talk more about the <code>default</code> configuration in <xref linkend="project_libraries"/>.
            As with dependencies, you can declare as many custom configurations as you like and assign artifacts to them.
        </para>
        <para>It is important to note that the custom archives you are creating as part of your build are not
        automatically assigned to any configuration. You have to explicitly do this assignment.</para>
    </section>
    <section>
        <title>Uploading Artifacts</title>
        <para>We have said that there is a specific upload task for each configuration. But before you can do an upload,
            you have to configure the upload task and define where to upload. The repositories you have defined as described
            in <xref linkend="sec:repositories"/> are not automatically used for uploading. In fact some of those repositories
            are not even capable of uploading, there are just capable of reading from a repository. Here is an example how
            you can configure the upload task of a configuration:
        </para>
        <sample id="uploading" dir="userguide/artifacts/uploading">
            <sourcefile file="build.gradle" snippet="uploading"/>
        </sample>
        <para>As you can see, you can either use a reference to an exisiting repository or create a new repository.
        As described in <xref linkend="sub:more_about_ivy_resolvers"/>, you can use all the Ivy resolvers suitable
        for the purpose of uploading.</para>
    </section>
    <section id="project_libraries">
        <title>More about project libraries</title>
        <para>If your project is supposed to be used as a library, you need to define what are the artifacts of this library
            and what are the dependencies of this artifacts. The Java plugin adds a <code>default</code> configuration for
            this purpose. This configuration extends both the <code>archives</code> and the <code>runtime</code> configuration,
            with the implicit assumption that the <code>runtime</code> dependencies are the dependencies of the <code>archives</code>
            configuration. Of course this is fully customizable. You can add your own custom configuration or let the the
            existing configurations extends from other configurations. You might have different group of artifacts which have
            a different set of dependencies. This mechanism is very powerful and flexible.
            </para>
        <para>If someone wants to use your project as a library, she simply needs to declare on which configuration of
            the dependency to depend on.
            A Gradle dependency offers the <code>dependencyConfiguration</code> property to declare this. If this
            is not specified, the <code>default</code> configuration is used. Using your project as a library
            can either happen from within a multi-project build or by retrieving your project from a repository. In
            the latter case, an ivy.xml descriptor in the repository is supposed to contain all the neccesary information. If you
            work with Maven repositories you don't have the flexibility as described above. For how to publish to a Maven
            repository, see the section <xref linkend="uploading_to_maven_repositories"/>.
        </para>
    </section>
    <section id='uploading_to_maven_repositories'>
        <title>Interacting with Maven Repositories</title>
        <section id='sec:introduction'>
            <title>Introduction</title>
            <para>With Gradle you can deploy to remote Maven repositories or install to your local Maven repository. This
                includes all Maven metadata manipulation and works also for Maven snapshots. In fact, Gradle's deployment is
                100 percent Maven compatible as we use the native Maven Ant tasks under the hood.
            </para>
            <para>Deploying to a Maven repository is only half the fun if you don't have a pom. Fortunately Gradle can
                generate this pom for your out of the dependency information it has.
            </para>
        </section>
        <section id='sec:deploying_to_a_maven_repository'>
            <title>Deploying to a Maven Repository</title>
            <para>Let's assume your projects produces just one jar file. Now you want to deploy this jar file to
                a remote Maven repository.
            </para>
            <programlisting><![CDATA[
    uploadLibs {
        repopsitories.mavenDeployer {
            repository(url: "file://localhost/tmp/myRepo/")
        }
    }
    ]]></programlisting>
            <para>That is all. Calling the
                <literal>uploadLibs</literal>
                task will generate the pom and deploys the artifact and the pom to the specified repository.
            </para>
            <para>There is some more work to do if you need support for other protocols than <literal>file</literal>. In
                this case the native Maven code we delegate to needs additional libraries. Those libraries depend on the
                protocol you need. The available protocols and the corresponding libraries are listed in <xref
                        linkend='wagonLibs'/>. Those libraries have again transitive dependencies which have transitive
                dependencies. You need to provide the complete list of those to the MavenDeployer{
                <footnote>
                    <para>It is planned for a future release to provide out-of-the-box support for this
                    </para>
                </footnote>
                }. The easiest way to do this is the following:
            </para>
            <programlisting><![CDATA[
    dependencies {
        addConfiguration('deployerJars')
        addMavenRepo()
        deployerJars "org.apache.maven.wagon:wagon-ssh:1.0-beta-2"
    }
    uploadLibs {
        repopsitories.mavenDeployer {
            repository(url: "scp://repos.mycompany.com/releases")
            addProtocolProviderJars(dependencies.resolve('deployerJars'))
        }
    }
    ]]></programlisting>
            <table id='wagonLibs'>
                <title>Protocol jars for Maven deployment</title>
                <thead>
                    <tr>
                        <td>Protocol</td>
                        <td>Library</td>
                    </tr>
                </thead>
                <tr>
                    <td>http</td>
                    <td>org.apache.maven.wagon:wagon-http:1.0-beta-2</td>
                </tr>
                <tr>
                    <td>ssh</td>
                    <td>org.apache.maven.wagon:wagon-ssh:1.0-beta-2</td>
                </tr>
                <tr>
                    <td>ssh-external</td>
                    <td>org.apache.maven.wagon:wagon-ssh-external:1.0-beta-2</td>
                </tr>
                <tr>
                    <td>scp</td>
                    <td>org.apache.maven.wagon:wagon-scp:1.0-beta-2</td>
                </tr>
                <tr>
                    <td>ftp</td>
                    <td>org.apache.maven.wagon:wagon-ftp:1.0-beta-2</td>
                </tr>
                <tr>
                    <td>webdav</td>
                    <td>org.apache.maven.wagon:wagon-webdav:1.0-beta-2</td>
                </tr>
                <tr>
                    <td>file</td>
                    <td>-</td>
                </tr>

            </table>
            <section id='sub:configuration_of_the_maven_deployer'>
                <title>Configuration of the Maven Deployer</title>
                <para>There are many configuration options for the Maven deployer. The configuration is done with a nested
                    tree. Here is a configuration with all existing elements of this tree.
                    <xref linkend='deployerConfig'/>
                    lists the available elements and a link to the javadoc of the corresponding class. In the javadoc you
                    can see the possible attributes you can set for a particular element.
                </para>
                <programlisting><![CDATA[
    uploadLibs {
        repopsitories.mavenDeployer {
            uniqueVersion = true
            repository(url: "ssh://localhost/tmp/myRepo/") {
                authentication(userName: "me", password: "myPassword")
                releases()
                snapshots()
                proxy()
            }
            snapshotRepository(url: "ssh://localhost/tmp/mySnapshotRepo/") {
                authentication(userName: "me", password: "myPassword")
                releases()
                snapshots()
                proxy()
            }
        }
    }
    ]]></programlisting>
                <para>In Maven you can define repositories and optionally snapshot repositories. If not snapshot repository
                    is defined releases and snapshots are both deployer to the
                    <literal>repository</literal>
                    element. Otherwise snapshots are deployed to the
                    <literal>snapshotRepository</literal>
                    element.
                </para>
                <table id='deployerConfig'>
                    <title>Configuration elements of the MavenDeployer</title>
                    <thead>
                        <tr>
                            <td>Element</td>
                            <td>Javadoc</td>
                        </tr>
                    </thead>
                    <tr>
                        <td>root</td>
                        <td>
                            <apilink class="org.gradle.api.artifacts.maven.MavenDeployer"/>
                        </td>
                    </tr>
                    <tr>
                        <td>repository</td>
                        <td>
                            <ulink url='http://maven.apache.org/ant-tasks/apidocs/org/apache/maven/artifact/ant/RemoteRepository.html'>
                                org.apache.maven.artifact.ant.RemoteRepository
                            </ulink>
                        </td>
                    </tr>
                    <tr>
                        <td>authentication</td>
                        <td>
                            <ulink url='http://maven.apache.org/ant-tasks/apidocs/org/apache/maven/artifact/ant/Authentication.html'>
                                org.apache.maven.artifact.ant.Authentication
                            </ulink>
                        </td>
                    </tr>
                    <tr>
                        <td>releases</td>
                        <td>
                            <ulink url='http://maven.apache.org/ant-tasks/apidocs/org/apache/maven/artifact/ant/RepositoryPolicy.html'>
                                org.apache.maven.artifact.ant.RepositoryPolicy
                            </ulink>
                        </td>
                    </tr>
                    <tr>
                        <td>snapshots</td>
                        <td>
                            <ulink url='http://maven.apache.org/ant-tasks/apidocs/org/apache/maven/artifact/ant/RepositoryPolicy.html'>
                                org.apache.maven.artifact.ant.RepositoryPolicy
                            </ulink>
                        </td>
                    </tr>
                    <tr>
                        <td>proxy</td>
                        <td>
                            <ulink url='http://maven.apache.org/ant-tasks/apidocs/org/apache/maven/artifact/ant/Proxy.html'>
                                org.apache.maven.artifact.ant.Proxy
                            </ulink>
                        </td>
                    </tr>
                    <tr>
                        <td>snapshotRepository</td>
                        <td>
                            <ulink url='http://maven.apache.org/ant-tasks/apidocs/org/apache/maven/artifact/ant/RemoteRepository.html'>
                                org.apache.maven.artifact.ant.RemoteRepository
                            </ulink>
                        </td>
                    </tr>

                </table>
            </section>
            <section id='sub:installing_to_the_local_repository'>
                <title>Installing to the local repository</title>
                <para>The easiest way to install to the local Maven repository is by using the maven plugin:
                </para>
                <programlisting><![CDATA[
    usePlugin('maven')
    ]]></programlisting>
                <para>This plugin adds an
                    <literal>install</literal>
                    task. This install task depends on the
                    <literal>libs</literal>
                    task of the Java plugin. It installs your libraries to your local Maven repository. If the default
                    location for the local repository is redefined in a Maven <literal>settings.xml</literal>, this is
                    considered by this task.
                </para>
            </section>
        </section>
        <section id='sec:maven_pom_generation'>
            <title>Maven Pom Generation</title>
            <para>The Maven Poms are automatically generated by Gradle. You can find the generated poms in the
                <literal>&lt;buildDir>/lib-poms</literal>
                and
                <literal>&lt;buildDir>/dist-poms</literal>
                directory. In many scenarios it just works and you don't have to do anything. But there are situations were
                you want or have to customize the pom generation.
            </para>
            <section id='sub:changing_non_dependency_elements_of_the_pom'>
                <title>Changing non-dependency elements of the pom</title>
                <para>You might want that the artifact deployed to the maven repository has a different version or name than
                    the artifact generated by Gradle. In such a case you can apply custom settings.
                </para>
                <programlisting><![CDATA[
    uploadLibs {
        repopsitories.mavenDeployer {
            repository(url: "file://localhost/tmp/myRepo/")
            pom.version = '1.0Maven'
            pom.artifactId = 'myName'
        }
    }
    ]]></programlisting>
                <para>To learn about all the customizable attributes of a pom have a look here: <apilink class="org.gradle.api.artifacts.maven.MavenPom"/>.
                </para>
                <para>To do this for the Maven Installer added by the Maven plugin (see <xref
                        linkend='sub:installing_to_the_local_repository'/>), you can do:
                </para>
                <programlisting><![CDATA[
    install {
        configure(uploadResolvers.get('maven-installer')) {
            pom.version = '1.0Maven'
            pom.artifactId = 'myName'
        }
    }
    ]]></programlisting>
            </section>
            <section id='sub:multiple_artifacts_per_project'>
                <title>Multiple Artifacts per project</title>
                <para>Maven can only deal with one artifact per project. This is also reflected in the structure of the
                    Maven pom. We think there are many situations where it makes sense to have more than one artifact per
                    project. Obviously just for the fact that those artifacts have different names but belong to the same
                    group, they need different poms. Another use case is that you might not want to publish all project
                    artifacts to the Maven Repository but only a subset. If your project libs or dists have more than one
                    artifact you have to assign each artifact you want to publish. The MavenDeployer and the MavenInstaller
                    both provide an API for this:
                </para>
                <programlisting><![CDATA[
    uploadLibs {
        repopsitories.mavenDeployer {
            repository(url: "file://localhost/tmp/myRepo/")
            addFilter('api') { artifact, file ->
                artifact.name == 'api'
            }
            addFilter('service') { artifact, file ->
                artifact.name == 'service'
            }
            pom('api').version = 'mySpecialMavenVersion'
        }
    }
    ]]></programlisting>
                <para>To learn more about this have a look at <apilink class="org.gradle.api.artifacts.maven.GroovyPomFilterContainer"/>
                    and its associated classes.
                </para>
            </section>
            <section id='sub:dependency_mapping'>
                <title>Dependency Mapping</title>
                <para>The Java plugin configures the a default mapping between Gradle configuration and Maven scopes. Most
                    of the time you don't need to touch this and you can safely skip this section. A Gradle-Maven dependency
                    mapping is not trivial, as in Gradle dependencies can belong to more than one configuration. Our mapping
                    works like the following. You can map a configuration to one and only one scope. Different
                    configurations can be mapped to more than one scope. One can assign also a priority to a particular
                    configuration-to-scope mapping. The default mapping is accessible via the dependency manager like
                    <literal>dependencies.defaultMavenScopeMapping</literal>. Have a look at
                    <apilink class="org.gradle.api.artifacts.maven.Conf2ScopeMappingContainer"/>
                    to learn how you can use the returned instance. Let's look at different mapping scenarios:
                </para>
                <itemizedlist>
                    <listitem>
                        <para>A dependency belongs to only one configuration: The first thing Gradle checks is whether there
                            is a mapping for this configuration. If there is none, the dependency is by default not added to
                            the pom. By setting the mapping property
                            <literal>includeUnmappedConfigurations</literal>
                            to true, such a dependency will be added. If the configuration is mapped, the corresponding
                            scope is obvious and the dependency is added.
                        </para>
                    </listitem>
                    <listitem>
                        <para>A dependency belongs to more than one mapped configuration: If the mapped configurations map
                            to the same scope the situation is clear. If the mapped configurations map to different scopes
                            the configuration mapping with the highest priority is chosen. If there is more than one
                            configuration with a highest priority and they map to different scopes an exception is thrown.
                        </para>
                    </listitem>
                </itemizedlist>
                <para>Gradle exclude rules are converted to Maven excludes if possible. Such a conversion is possible if in
                    the Gradle exclude rule the organisation as well as the module name is specified (as Maven needs both in
                    contrast to Ivy). Right now Global Excludes are not converted to the Maven Pom.
                </para>
            </section>
            <section id='sub:planned_future_features'>
                <title>Planned future features</title>
                <para>We plan support for conversion of global excludes. We also plan support for the new Ivy
                    <emphasis>override</emphasis>
                    element, which corresponds to the
                    <emphasis>dependencyManagement</emphasis>
                    element of a Maven pom. Last but not least we want to make the customization more powerful, by enabling
                    to add custom dependency elements to the pom and remove/modify auto-generated ones.
                </para>
            </section>
        </section>
    </section>
</chapter>
