<chapter id='tutorial_java_projects' xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Tutorial - Java Projects</title>
    <para>We have in-depth coverage with many examples about the Java plugin, dependency management and
        multi-project builds in later chapters. In this chapter we want to give you a first idea of how to build a
        Java project.
    </para>
    <section id='sec:examples'>
        <title>Examples</title>
        <para>Provided your build script contains the single line
        </para>
        <programlisting><![CDATA[
usePlugin('java')
]]></programlisting>
        <para>Executing <literal>gradle libs</literal> will compile, test and jar your code. If you specify a remote
            repository, executing <literal>gradle uploadLibs</literal>
            will additionally upload your jar to a remote repository. Builds usually have more requirements.
            Let's look at a typical multi-project build.
        </para>
        <programlisting><![CDATA[
D- ultimateApp
  D- api
  D- webservice
  D- shared
]]></programlisting>
        <para>We have three projects. Project <literal>api</literal> produces a JAR file which is shipped to the client to
            provide them a Java client for your XML webservice. Project <literal>webservice</literal> is a webapp which returns XML.
            Project <literal>shared</literal> contains code used both by <literal>api</literal>
            and <literal>webservice</literal>. Let's look at the Gradle build scripts of these projects.
        </para>
        <programlisting><![CDATA[
subprojects {
    manifest.mainAttributes([
	    'Implementation-Title': 'Gradle',
		'Implementation-Version': '0.1'
	])
	dependencies {
		compile "commons-lang:commons-lang:3.1"
		testCompile "junit:junit:4.4"
	}
	test {
	    include '**/*Test.class'
	    exclude '**/Abstract*'
	}
}
]]></programlisting>
        <para>The common stuff for each of the projects we define in the root project. Not by inheritance but via
            <emphasis>Configuration Injection</emphasis>. The root project is like a container and
            <literal>subprojects</literal> iterates over the elements of this container - the projects in this instance -
            and injects the specified configuration. This way we can easily define the manifest content for all archives.
        </para>
        <programlisting><![CDATA[
dependencies {
	compile "commons-httpclient:commons-httpclient:3.1", project(":shared")
}

dists {
	zip() {
		files(dependencies.resolve("runtime")) // add dependencies to zip
		fileset(dir: "path/distributionFiles")
	}
}
]]></programlisting>
        <para>In the <literal>api</literal> build script we add further dependencies. One dependency is on the jars
            produced by the <literal>shared</literal> project. Due to this dependency, Gradle will ensure that
            project <literal>shared</literal> always gets built before project <literal>api</literal>.
            We also add a distribution, that gets shipped to the client.
        </para>
    </section>
</chapter>
