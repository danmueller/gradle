<chapter id='tutorial_java_projects' xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Tutorial - Java Projects</title>

    <para>To build a Java project, you use the <emphasis>Java Plugin</emphasis>. This plugin adds some tasks to your
        project, along with some configuration properties, to allow you to compile and test your Java source code, and
        bundle it into a JAR file. We have in-depth coverage with many examples about the Java plugin, dependency
        management and multi-project builds in later chapters. In this chapter we want to give you an initial idea of
        how to build a Java project.
    </para>

    <section>
        <title>A Basic Java Project</title>
        <para>To use the Java plugin in your project, add the following to your build file:</para>
        <sample id="javaQuickstart" dir="java/quickstart">
            <sourcefile file="build.gradle" snippet="use-plugin"/>
        </sample>
        <para>This is all you need to define a Java project. This will apply the Java plugin to your project, which adds
            a number of tasks to your project.</para>
        <tip>
            <title>Viewing Project Tasks</title>
            <para>You can use <userinput>gradle -t</userinput> to list the tasks of a project. This will let you see
            the tasks added by the Java plugin.
        </para></tip>
        <para>Executing
            <userinput>gradle libs</userinput> will compile, test and jar your code. Gradle looks for your
            Java source code under <filename>src/main/java</filename> and your test source code under
            <filename>src/test/java</filename>. In addition, any files under <filename>src/main/resources</filename>
            will be included in the JAR file as resources, and any files under <filename>src/test/resources</filename>
            will be included in the classpath used to run the tests.
        </para>
        <para>You can find out more about the Java plugin in <xref linkend="java_plugin"/>.</para>

        <section>
            <title>External Dependencies</title>

            <para>Usually, a project will have some dependencies on external libraries. To reference external
                libraries in the project, you need to tell Gradle where to find them. In Gradle, artifacts such as Jar
                files, are located in a <firstterm>repository</firstterm>. A repository can be used for fetching the
                dependencies of a project, or for publishing the artifacts of a project, or both. For this example,
                we will use the public Maven repository:</para>
            <sample id="javaQuickstart" dir="java/quickstart">
                <sourcefile file="build.gradle" snippet="repo"/>
            </sample>

            <para>Now let's add some dependencies. Here, we will declare that our production classes have a compile-time
                dependency on commons collections, and that our test classes have a compile-time dependency on junit:</para>
            <sample id="javaQuickstart" dir="java/quickstart">
                <sourcefile file="build.gradle" snippet="dependencies"/>
            </sample>
            <para>You can find out more in <xref linkend="dependency_management"/>.</para>
        </section>

        <section>
            <title>Customising the Project</title>
            <para>The Java plugin adds a number of properties to your project. These properties have default values
                which are usually sufficient to get started. Let's look at customising some of these values:
            </para>
            <sample id="javaQuickstart" dir="java/quickstart">
                <sourcefile file="build.gradle" snippet="customisation"/>
            </sample>
            <tip>
                <title>Viewing Project Properties</title>
                <para>You can use <userinput>gradle -r</userinput> to list the properties of a project. This will allow
                you to see the properties added by the Java plugin, and their default values.</para></tip>
            <para>The Java plugin adds and configures tasks exactly as described in previous chapters. This
                means you can use any of the mechanisms shown there to customise these tasks. For example, you can
                customise the properties of a task, add behaviour or dependencies to a task, or replace a task
                entirely. In our sample, we will configure the <literal>test</literal> task, which is of type
                <apilink class="org.gradle.api.tasks.testing.Test"/>, to add a system property when the tests are
                executed:</para>
            <sample id="javaQuickstart" dir="java/quickstart">
                <sourcefile file="build.gradle" snippet="task-customisation"/>
            </sample>
        </section>

        <section>
            <title>Publishing the JAR File</title>
            <para>For the JAR file to be used outside the project, it needs to be published somewhere. In order for
                Gradle to publish a JAR file, you need to tell it where to publish artifacts to. Artifacts such as JAR
                files are published to repositories. In our sample, we will publish to the <filename>repos</filename>
                directory.</para>
            <sample id="javaQuickstart" dir="java/quickstart">
                <sourcefile file="build.gradle" snippet="upload"/>
            </sample>
            <para>To publish the JAR file, run <userinput>gradle uploadMaster</userinput>.</para>
        </section>

        <para>Here's our complete build file:</para>
        <sample id="javaQuickstart" dir="java/quickstart">
            <sourcefile file="build.gradle"/>
        </sample>
    </section>

    <section id='sec:examples'>
        <title>Multi-project Java Build</title>
        <para>Let's look at a typical multi-project build. Below is the layout for the project:
        </para>
        <programlisting><![CDATA[
D- ultimateApp
  D- api
  D- services
    D- webservice
  D- shared
]]></programlisting>
        <para>We have three projects. Project <literal>api</literal> produces a JAR file which is shipped to the client to
            provide them a Java client for your XML webservice. Project <literal>webservice</literal> is a webapp which
            returns XML. Project <literal>shared</literal> contains code used both by <literal>api</literal>
            and <literal>webservice</literal>.
        </para>

        <section>
            <title>Defining a Multi-Project Build</title>
            <para>To define a multi-project build, you need to create a <firstterm>settings file</firstterm>. The settings
                file lives in the root directory of the source tree, and specifies which projects to include in the
                build. It must be called <filename>settings.gradle</filename>. For this example, we are using a simple
                hierarchical layout. Here is the corresponding settings file:
            </para>
            <sample id="javaMultiProject" dir="java/multiproject">
                <sourcefile file="settings.gradle" snippet="include-projects"/>
            </sample>
            <para>You can find out more in <xref linkend="multi_project_builds"/>.</para>
        </section>

        <section>
            <title>Common Configuration</title>
            <para>For most builds, there is some configuration which is common to all projects. In our sample, we will
                define the common configuration in the root project, using a technique called
                <firstterm>configuration injection</firstterm>. Here, the root project is like a container and the
                <literal>subprojects</literal> method iterates over the elements of this container - the projects in
                this instance - and injects the specified configuration. This way we can easily define the manifest
                content for all archives, and some common dependencies:
            </para>
            <sample id="javaMultiProject" dir="java/multiproject">
                <sourcefile file="build.gradle"/>
            </sample>
        </section>

        <section>
            <title>Building the Projects</title>
            <para>Notice that our sample applies the Java plugin to each subproject. This means the tasks and
                configuration properties we have seen in the previous section is applied to each subproject.
                So, you can compile, test, and JAR all the projects by running <userinput>gradle libs</userinput> from
                the root project directory.</para>
        </section>

        <section>
            <title>Dependencies Between Projects</title>
            <para>You can add dependencies between projects in the same build, so that the JAR file of one project is
                used to compile another project. In the <literal>api</literal> build file we will add a dependency
                on the jars produced by the <literal>shared</literal> project. Due to this dependency, Gradle will
                ensure that project <literal>shared</literal> always gets built before project <literal>api</literal>.
            </para>
            <sample id="javaMultiProject" dir="java/multiproject">
                <sourcefile file="api/build.gradle" snippet="dependencies"/>
            </sample>
        </section>

        <section>
            <title>Creating a Distribution</title>
            <para>
                We also add a distribution, that gets shipped to the client:
            </para>
            <sample id="javaMultiProject" dir="java/multiproject">
                <sourcefile file="api/build.gradle" snippet="dists"/>
            </sample>
        </section>
    </section>

    <section>
        <title>Summary</title>
        <para>In this chapter, you have learnt how to do some of the common things to build a Java based project.
            This chapter is not exhaustive, and there are many other things you can do. These are dealt with in later
            chapters. Also, a lot of the behaviour described in this chapter is changable. For example, you can change
            where Gradle looks Java source files, or add extra tasks, or you can change what any task actually does.
        </para>
    </section>
</chapter>
