<chapter id='tutorial_java_projects' xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Java Quickstart</title>

    <para>To build a Java project, you use the <emphasis>Java Plugin</emphasis>. This plugin adds some tasks to your
        project, along with some configuration properties, to allow you to compile and test your Java source code, and
        bundle it into a JAR file. We have in-depth coverage with many examples about the Java plugin, dependency
        management and multi-project builds in later chapters. In this chapter we want to give you an initial idea of
        how to build a Java project.
    </para>

    <section>
        <title>A Basic Java Project</title>
        <para>To use the Java plugin in your project, add the following to your build file:</para>
        <sample id="javaQuickstart" dir="java/quickstart">
            <sourcefile file="build.gradle" snippet="use-plugin"/>
        </sample>
        <para>This is all you need to define a Java project. This will apply the Java plugin to your project, which adds
            a number of tasks to your project.</para>
        <tip>
            <title>What Tasks Are Available?</title>
            <para>You can use <userinput>gradle -t</userinput> to list the tasks of a project. This will let you see
            the tasks that the Java plugin has added to your project.
        </para></tip>
        <para>Executing
            <userinput>gradle libs</userinput> will compile, test and jar your code. Gradle looks for your
            production source code under <filename>src/main/java</filename> and your test source code under
            <filename>src/test/java</filename>. In addition, any files under <filename>src/main/resources</filename>
            will be included in the JAR file as resources, and any files under <filename>src/test/resources</filename>
            will be included in the classpath used to run the tests. All output files will end up under the
            <filename>build</filename> directory.
        </para>
        <para>You can find out more about the Java plugin in <xref linkend="java_plugin"/>.</para>

        <section>
            <title>External Dependencies</title>

            <para>Usually, a Java project will have some dependencies on external JAR files. To reference these JAR
                files in the project, you need to tell Gradle where to find them. In Gradle, artifacts such as JAR
                files, are located in a <firstterm>repository</firstterm>. A repository can be used for fetching the
                dependencies of a project, or for publishing the artifacts of a project, or both. For this example,
                we will use the public Maven repository:</para>
            <sample id="javaQuickstart" dir="java/quickstart">
                <sourcefile file="build.gradle" snippet="repo"/>
            </sample>

            <para>Let's add some dependencies. Here, we will declare that our production classes have a compile-time
                dependency on commons collections, and that our test classes have a compile-time dependency on junit:</para>
            <sample id="javaQuickstart" dir="java/quickstart">
                <sourcefile file="build.gradle" snippet="dependencies"/>
            </sample>
            <para>You can find out more in <xref linkend="dependency_management"/>.</para>
        </section>

        <section>
            <title>Customising the Project</title>
            <para>The Java plugin adds a number of properties to your project. These properties have default values
                which are usually sufficient to get started. It's easy to change these values if they don't suit. Let's
                look at this for our sample. Here we will specify the version number for our Java project, along
                with the Java version our source is written in. We also add some attributes to the JAR manifest.
            </para>
            <sample id="javaQuickstart" dir="java/quickstart">
                <sourcefile file="build.gradle" snippet="customisation"/>
            </sample>
            <tip>
                <title>What properties are available?</title>
                <para>You can use <userinput>gradle -r</userinput> to list the properties of a project. This will allow
                you to see the properties added by the Java plugin, and their default values.</para></tip>
            <para>The tasks which the Java plugin adds are regular tasks, exactly the same as if they were declared in
                the build file. This means you can use any of the mechanisms shown in earlier chapters to customise
                these tasks. For example, you can set the properties of a task, add behaviour to a task, change the
                dependencies of a task, or replace a task entirely. In our sample, we will configure the
                <literal>test</literal> task, which is of type<apilink class="org.gradle.api.tasks.testing.Test"/>, to
                add a system property when the tests are executed: </para>
            <sample id="javaQuickstart" dir="java/quickstart">
                <sourcefile file="build.gradle" snippet="task-customisation"/>
            </sample>
        </section>

        <section>
            <title>Publishing the JAR File</title>
            <para>Usually the JAR file needs to be published somewhere. To do this, you need to tell Gradle where to
                publish the JAR file. In Gradle, artifacts such as JAR files are published to repositories. In our
                sample, we will publish to a local directory. You can also publish to a remote location, or multiple
                location.
            </para>
            <sample id="javaQuickstart" dir="java/quickstart">
                <sourcefile file="build.gradle" snippet="upload"/>
            </sample>
            <para>To publish the JAR file, run <userinput>gradle uploadMaster</userinput>.</para>
        </section>

        <section>
            <title>Summary</title>
            <para>Here's the complete build file for our sample:</para>
            <sample id="javaQuickstart" dir="java/quickstart">
                <sourcefile file="build.gradle"/>
            </sample>
        </section>
    </section>

    <section id='sec:examples'>
        <title>Multi-project Java Build</title>
        <para>Now let's look at a typical multi-project build. Below is the layout for the project:
        </para>
        <programlisting><![CDATA[
D- ultimateApp
  D- api
  D- services
    D- webservice
  D- shared
]]></programlisting>
        <para>Here we have three projects. Project <literal>api</literal> produces a JAR file which is shipped to the
            client to provide them a Java client for your XML webservice. Project <literal>webservice</literal> is a
            webapp which returns XML. Project <literal>shared</literal> contains code used both by <literal>api</literal>
            and <literal>webservice</literal>.
        </para>

        <section>
            <title>Defining a Multi-Project Build</title>
            <para>To define a multi-project build, you need to create a <firstterm>settings file</firstterm>. The settings
                file lives in the root directory of the source tree, and specifies which projects to include in the
                build. It must be called <filename>settings.gradle</filename>. For this example, we are using a simple
                hierarchical layout. Here is the corresponding settings file:
            </para>
            <sample id="javaMultiProject" dir="java/multiproject">
                <sourcefile file="settings.gradle" snippet="include-projects"/>
            </sample>
            <para>You can find out more about the settings file in <xref linkend="multi_project_builds"/>.</para>
        </section>

        <section>
            <title>Common Configuration</title>
            <para>For most multi-project builds, there is some configuration which is common to all projects.
                In our sample, we will define this common configuration in the root project, using a technique called
                <firstterm>configuration injection</firstterm>. Here, the root project is like a container and the
                <literal>subprojects</literal> method iterates over the elements of this container - the projects in
                this instance - and injects the specified configuration. This way we can easily define the manifest
                content for all archives, and some common dependencies:
            </para>
            <sample id="javaMultiProject" dir="java/multiproject">
                <sourcefile file="build.gradle"/>
            </sample>

            <para>Notice that our sample applies the Java plugin to each subproject. This means the tasks and
                configuration properties we have seen in the previous section are available in each subproject.
                So, you can compile, test, and JAR all the projects by running <userinput>gradle libs</userinput> from
                the root project directory.</para>
        </section>

        <section>
            <title>Dependencies Between Projects</title>
            <para>You can add dependencies between projects in the same build, so that, for example, the JAR file of one
                project is used to compile another project. In the <literal>api</literal> build file we will add a dependency
                on the JAR produced by the <literal>shared</literal> project. Due to this dependency, Gradle will
                ensure that project <literal>shared</literal> always gets built before project <literal>api</literal>.
            </para>
            <sample id="javaMultiProject" dir="java/multiproject">
                <sourcefile file="api/build.gradle" snippet="dependencies"/>
            </sample>
        </section>

        <section>
            <title>Creating a Distribution</title>
            <para>
                We also add a distribution, that gets shipped to the client:
            </para>
            <sample id="javaMultiProject" dir="java/multiproject">
                <sourcefile file="api/build.gradle" snippet="dists"/>
            </sample>
        </section>
    </section>

    <section>
        <title>Summary</title>
        <para>In this chapter, you have learnt how to do some of the things you commonly need to build a Java based
            project.
            This chapter is not exhaustive, and there are many other things you can do. These are dealt with in later
            chapters. Also, a lot of the behaviour you have seen in this chapter is configurable. For example, you can
            change where Gradle looks Java source files, or add extra tasks, or you can change what any task actually
            does.
        </para>
    </section>
</chapter>
