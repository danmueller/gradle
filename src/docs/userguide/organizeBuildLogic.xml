<chapter id='organizing_build_logic' xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Organizing Build Logic</title>
    <para>Gradle offers a variety of ways to organize your build logic. First of all you can put your build logic
        directly in the action closure of a task. If a couple of tasks share the same logic you can extract this logic
        into a method. If multiple projects of a multi-project build share some logic you can define this method in the
        parent project. If the build logic gets too complex for being properly modeled by methods you want have an OO
        Model.
        <footnote>
            <para>Which might range from a single class to something very complex)
            </para>
        </footnote>
        Gradle makes this very easy. Just drop your classes in a certain folder and Gradle automatically compiles them
        and puts them in the classpath of your build script.
    </para>
    <section id='sec:build_sources'>
        <title>Build Sources</title>
        <para>If you run Gradle, it checks for the existence of a folder called <literal>buildSrc</literal>. Just put
            your build source code in this folder and stick to the layout convention for a Java/Groovy project (see
            <xref linkend='javalayout'/>). Gradle then automatically compiles and tests this code and puts it in
            the classpath of your build script. You don't need to provide any further instruction. For multi-project
            builds there can be only one
            <literal>buildSrc</literal>
            directory which has to be in the root project.
        </para>
        <para>This is probably good enough for most of the cases. If you need more flexibility, you can provide a
            <filename>build.gradle</filename> and a <filename>settings.gradle</filename> file in the
            <filename>buildSrc</filename> folder. If you like, you can even have a multi-project build in there.
        </para>
    </section>
    <section id='sec:external_dependencies'>
        <title>External dependencies</title>
        <para>If your build script needs external libraries you can declare them in the
            <literal>settings.gradle</literal>
            file.
        </para>
        <programlisting><![CDATA[
dependencies("commons-math:commons-math:1.1:jar")
]]></programlisting>
        <para>You can pass any of the dependencies described in
            <xref linkend='sec:how_to_declare_your_dependencies'/>
            (except project dependencies). There is
            <emphasis>no</emphasis>
            need to provide a <emphasis>dependency configuration</emphasis> (e.g. <literal>compile</literal>). For
            multi-project builds dependencies declared in the
            <literal>settings.gradle</literal>
            file of the root project, are available to all build scripts of the sub-projects.
        </para>
    </section>
    <section id='sec:ant_optional_dependencies'>
        <title>Ant Optional Dependencies</title>
        <para>For reasons we don't fully understand yet, external dependencies are not picked up by Ant's optional
            tasks. But you can easily do it in another way.
            <footnote>
                <para>In fact, we think this is anyway the nicer solution. Only if your buildscript and Ant's optional
                    task need the <emphasis>same</emphasis> library you would have to define it two times. In such a
                    case it would be nice, if Ant's optional task would automatically pickup the classpath defined
                    in the <literal>gradesettings</literal>.
                </para>
            </footnote>
        </para>
        <programlisting><![CDATA[
dependencies {
    addConfiguration('ftpAntTask')
    clientModule(['ftpAntTask'], ":ant-commons-net:1.7.0") {
        clientModule(":commons-net:1.4.1") {
            dependencies(":oro:2.0.8:jar")
        }
    }
}
createTask('ftp') {
    ant {
        taskdef(name: 'ftp',
                classname: 'org.apache.tools.ant.taskdefs.optional.net.FTP',
                classpath: dependencies.antpath('ftpAntTask'))
        ftp(server: "ftp.apache.org", userid: "anonymous", password: "me@myorg.com") {
            fileset(dir: "htdocs/manual")
        }
    }
}
]]></programlisting>
    </section>
    <section id='sec:philosophy'>
        <title>Summary</title>
        <para>Gradle offers you a variety of ways of organizing your build logic. You can choose what is right for your
            domain and find the right balance between unnecessary indirections, and avoiding redundancy and a hard to
            maintain code base. It is our experience that even very complex custom build logic is rarely shared between
            different builds. Other build tools enforce a separation of this build logic into a separate project. Gradle
            spares you this unnecessary overhead and indirection.
        </para>
    </section>
</chapter>
