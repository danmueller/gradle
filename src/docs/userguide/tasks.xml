<chapter id='more_about_tasks' xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>More about Tasks</title>
    <para>In the introductory tutorial (<xref linkend='tutorial_using_tasks'/>) you have learned how to
        create simple tasks. You have also learned how to add additional behavior to these tasks later on. And you have
        learned how to create dependencies between tasks. This was all about simple tasks. But Gradle takes the concept
        of tasks further. Gradle supports <firstterm>enhanced tasks</firstterm>, that is, tasks which have their own
        properties and methods. This is really different to what you are used to with Ant targets. Such enhanced tasks are
        either provided by you or are provided by Gradle.
    </para>
    <section>
        <title>Defining Tasks</title>
        <para>We have already seen how to define tasks using a keyword style in <xref linkend="tutorial_using_tasks"/>.
            There are a few variations on this style, which you may need to use in certain situations. For example,
            the keyword style does not work in expressions.
        </para>
        <sample id="defineAsExpression" dir="userguide/tasks/defineAsExpression">
            <sourcefile file="build.gradle"/>
        </sample>
        <para>You can also use strings for the task names:</para>
        <sample id="defineUsingStringTaskNames" dir="userguide/tasks/defineUsingStringTaskNames">
            <sourcefile file="build.gradle"/>
        </sample>
        <para>There is an alternate syntax for defining tasks, which you may prefer to use:</para>
        <sample id="addToTaskContainer" dir="userguide/tasks/addToTaskContainer">
            <sourcefile file="build.gradle"/>
        </sample>
        <para>Here we add tasks to the <literal>tasks</literal> collection. Have a look at
            <apilink class="org.gradle.api.tasks.TaskContainer"/> for more variations of the <literal>add()</literal>
            method.</para>
    </section>
    <section>
        <title>Locating Tasks</title>
        <para>You often need to locate the tasks that you have defined in the build file, for example, to configure them
            or use them for dependencies. There are a number of ways you can do this. Firstly, each task is available as
            a property of the project, using the task name as the property name:
        </para>
        <sample id="accessAsProperty" dir="userguide/tasks/accessAsProperty">
            <sourcefile file="build.gradle"/>
        </sample>
        <para>Tasks are also available through the <literal>tasks</literal> collection.</para>
        <sample id="accessFromTaskContainer" dir="userguide/tasks/accessFromTaskContainer">
            <sourcefile file="build.gradle"/>
        </sample>
        <para>You can access tasks from any project using the task's path using the <literal>tasks.getByPath()</literal>
            method. You can call the <literal>getByPath()</literal> method with a task name, or a relative path, or an
            absolute path.</para>
        <sample id="accessUsingPath" dir="userguide/tasks/accessUsingPath">
            <sourcefile file="build.gradle"/>
            <output args="-q hello"/>
        </sample>
        <para>Have a look at <apilink class="org.gradle.api.tasks.TaskContainer"/> for more options for locating tasks.</para>
    </section>
    <section id='sec:configuring_tasks'>
        <title>Configuring Tasks</title>
        <para>As an example, let's look at the <classname>Copy</classname> task provided by Gradle. To create a
            <classname>Copy</classname> task for your build, you can declare in your build script:
            <footnote>
                <para>If you use the Java Plugin, this task is automatically created and added to your project.
                </para>
            </footnote>
        </para>
        <sample id="configureUsingClosure" dir="userguide/tasks/configureUsingClosure">
            <sourcefile file="build.gradle" snippet="declare-task"/>
        </sample>
        <para>The copy task provides an API to configure it (see <apilink class="org.gradle.api.tasks.Copy"/>).
            If you create the copy task like this, it has no default behavior.
            <footnote>
                <para>This is different when added by the Java Plugin where it is used for resource processing.
                </para>
            </footnote>
            We want now use the copy task to learn about different ways to configure tasks. The examples below all
            show different ways to achieve the same configuration.
        </para>
        <sample id="configureUsingVar" dir="userguide/tasks/configureUsingVar">
            <sourcefile file="build.gradle"/>
        </sample>
        <para>This is similar to the way we would normally configure objects in Java. You have to repeat the context
            (<literal>copy</literal>) in the configuration statement every time. This is a redundancy and not very
            nice to read.
        </para>
        <para>There is a more convenient way of doing this.
        </para>
        <sample id="configureUsingLiterateStyle" dir="userguide/tasks/configureUsingLiterateStyle">
            <sourcefile file="build.gradle"/>
        </sample>
        <para>You might know this approach from the Hibernates Criteria Query API or JMock. Of course the API of a task
            has to support this. The <literal>from</literal>, <literal>to</literal> and <literal>includes</literal>
            methods all return an instance of the <classname>Copy</classname> object. Gradle's build-in tasks usually
            support this configuration style.
        </para>
        <para>But there is yet another way of configuring a task. It also preserves the context and it is arguably the
            most readable. It is usually our favorite.
        </para>
        <sample id="configureUsingClosure" dir="userguide/tasks/configureUsingClosure">
            <sourcefile file="build.gradle"/>
        </sample>
        <para>This works for <emphasis>any</emphasis> task. Line 3 of the example is just a shortcut for the
            <literal>tasks.getByName()</literal> method. It is important to note that if you pass a closure to the
            <literal>getByName()</literal> method, this closure is applied to <emphasis>configure</emphasis> the task.
        </para>
        <para>There is a slightly different ways of doing this.</para>
        <sample id="configureUsingConfigure" dir="userguide/tasks/configureUsingConfigure">
            <sourcefile file="build.gradle"/>
        </sample>
        <para>Every task has a <literal>configure()</literal> method, which you can pass a closure for configuring the task.
            Gradle uses this style for configuring objects in many places, not just for tasks.
        </para>
        <para>You can also use a configuration closure when you define a task.</para>
        <sample id="configureUsingClosure" dir="userguide/tasks/defineAndConfigure">
            <sourcefile file="build.gradle"/>
        </sample>
    </section>
    <section id='sec:adding_dependencies_to_tasks'>
        <title>Adding Dependencies to Tasks</title>
        <para>There are several ways you can define the dependencies of a task. In
            <xref linkend='sec:task_dependencies'/>
            you were introduced to defining dependencies using task names. Task names can refer to tasks in the same
            project as the task, or to tasks in other projects. To refer to a task in another project, you prefix the
            name of the task with the path of the project it belongs to. Below is an example which adds a dependency
            from
            <literal>projectA:taskX</literal>
            to
            <literal>projectB:taskY</literal>:
        </para>
        <sample id="addDependencyUsingPath" dir="userguide/tasks/addDependencyUsingPath">
            <sourcefile file="build.gradle"/>
            <output args="-q taskX"/>
        </sample>
        <para>Instead of using a task name, you can define a dependency using a
            <classname>Task</classname> object, as shown in this example:
        </para>
        <sample id="addDependencyUsingTask" dir="userguide/tasks/addDependencyUsingTask">
            <sourcefile file="build.gradle"/>
            <output args="-q taskX"/>
        </sample>
        <para>For more advanced uses, you can define a task dependency using a closure. When evaluated, the closure is
            passed the task whose dependencies are being calculated. The closure should return a single
            <classname>Task</classname> or collection of <classname>Task</classname> objects, which are then treated
            as dependencies of the task. The following example adds a dependency from <literal>taskX</literal>
            to all the tasks in the project whose name starts with <literal>lib</literal>:
        </para>
        <sample id="addDependencyUsingClosure" dir="userguide/tasks/addDependencyUsingClosure">
            <sourcefile file="build.gradle"/>
            <output args="-q taskX"/>
        </sample>
        <para>For more information about task dependencies, see the <apilink class="org.gradle.api.Task"/> API.</para>
    </section>
    <section>
        <title>Replacing Tasks</title>
        <para>Sometimes you want to replace a task. For example if you want to exchange a task added by the Java Plugin
            with a custom task of a different type. You can achieve this with:
        </para>
        <sample id="replaceTask" dir="userguide/tutorial/replaceTask">
            <sourcefile file="build.gradle"/>
            <output args="-q copy"/>
        </sample>
        <para>Here we replace a task of type <literal>Copy</literal> with a simple task. When creating the simple
            task, you have to set the <literal>overwrite</literal> property to true. Otherwise Gradle throws an
            exception, saying that a task with such a name already exists.
        </para>
    </section>
    <section id='sec:the_idea_behind_gradle_tasks'>
        <title>Summary</title>
        <para>If you are coming from Ant, such an enhanced Gradle task as <emphasis>Copy</emphasis> looks like a mixture
            between an Ant target and an Ant task. And this is actually the case. The separation that Ant does between
            tasks and targets is not done by Gradle. The simple Gradle tasks are like Ant's targets and the enhanced
            Gradle tasks also include the Ant task aspects. All of Gradle's tasks share a common API and you can create
            dependencies between them. Such a task might be nicer to configure than an Ant task.
            It makes full use of the type system, is more expressive and easier to maintain.
        </para>
    </section>
</chapter>
